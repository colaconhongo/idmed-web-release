import{Y as m,bM as r,bO as P,cV as S,J as A}from"./index.28c7e456.js";import{S as $}from"./StockAlertService.3ee5a37f.js";const{isOnline:v}=m();var T={async apiInitMmiaProcessing(e){return await r().post("/mmiaReport/initReportProcess",e)},async apiInitLinhasUsadasProcessing(e){return await r().post("/linhasUsadasReport/initReportProcess",e)},async apiInitSegundasLinhasProcessing(e){return await r().post("/segundasLinhasReport/initReportProcess",e)},async apiInitBalanceteProcessing(e){return await r().post("/balanceteReport/initReportProcess",e)},async apiInitPatientsAbandonmentProcessing(e){return await r().post("/patientsAbandonmentReport/initReportProcess",e)},async apiPrintMmiaReport(e,t){return await r().get(`/mmiaReport/printReport/${e}/${t}`)},async apiGetMmiaReport(e){return await r().get(`/mmiaReport/${e}`)},async apiInitReceivedStockProcessing(e){return await r().post("/stockReportTemp/initReportProcess",e)},async apiReceivedStockReport(e,t){return await r().get(`/stockReportTemp/printReport/${e}/${t}`)},async apiInitUsedStockProcessing(e){return await r().post("/usedStockReportTemp/initReportProcess",e)},async apiUsedStockReport(e,t){return await r().get(`/usedStockReportTemp/printReport/${e}/${t}`)},async apiInitArvDailyRegisterProcessing(e){return await r().post("/arvDailyRegisterReportTemp/initReportProcess",e)},async apiArvDailyRegisterReport(e,t){return await r().get(`/arvDailyRegisterReportTemp/printReport/${e}/${t}`)},async apiInitActiveInDrugStoreProcessing(e){return await r().post("/activePatientReport/initReportProcess",e)},async apiInitExpectedPatientsProcessing(e){return await r().post("/expectedPatientsReport/initReportProcess",e)},async apiInitInventoryReportProcessing(e){return await r().post("/inventoryReport/initReportProcess",e)},async getInventoryList(e,t){return await r().get(`/${e}/getInventoryList/${t}`)},async apiInitReferredPatientsProcessing(e){return await r().post("/referredPatientsReport/initReportProcess",e)},async apiActivePatientReport(e,t){return await r().get(`/activePatientReport/printReport/${e}/${t}`)},async apiInitPatientsHistryProcessing(e){return await r().post("/historicoLevantamentoReport/initReportProcess",e)},async apiPatientsHistryReport(e,t){return await r().get(`/historicoLevantamentoReport/printReport/${e}/${t}`)},apiMigrationStatus(){return r().get("/migration/migrationStatus")},apiMigrationStatusDetails(e){return r().get(`/migration/migrationStatusDetails/${e}`)},apiGetRegisteredPatientByDispenseType(e,t,i){return r().get(`/dashBoard/getRegisteredPatientByDispenseType/${e}/${t}/${i}`)},apiGetPatientsFirstDispenseByGender(e,t,i){return r().get(`/dashBoard/getPatientsFirstDispenseByGender/${e}/${t}/${i}`)},apiGetPatientsFirstDispenseByAge(e,t,i){return r().get(`/dashBoard/getPatientsFirstDispenseByAge/${e}/${t}/${i}`)},apiGetActivePatientPercentage(e,t,i){return r().get(`/dashBoard/getActivePatientPercentage/${e}/${t}/${i}`)},apiGetDispenseByAge(e,t,i){return r().get(`/dashBoard/getDispenseByAge/${e}/${t}/${i}`)},apiGetDispensesByGender(e,t,i){return r().get(`/dashBoard/getDispensesByGender/${e}/${t}/${i}`)},apiGetStockAlert(e,t){return r().get(`/dashBoard/getStockAlert/${e}/${t}`)},apiGetStockAlertAll(e){return r().get(`/dashBoard/getStockAlertAll/${e}`)},apiGetDashboardServiceButton(e,t){return r().get(`/dashBoard/getDashboardServiceButton/${e}/${t}`)},apiPrintActivePatientReport(e){return r().get(`/activePatientReport/printReport/${e}`,{responseType:"json"})},apiPrintExpectedPatientsReport(e){return r().get(`/expectedPatientsReport/printReport/${e}`,{responseType:"json"})},apiPrintInventoryReport(e,t){return r().get(`/inventoryReport/printReportByInventoryId/${e}/${t}`,{responseType:"json"})},apiPrintPatientsWithoutDispenseReport(e){return r().get(`/patientWithoutDispense/printReport/${e}`,{responseType:"json"})},apiGenerateAbsentPatientsReport(e,t){return r().get(`/absentPatientsReport/printReport/${e}/${t}`,{responseType:"json"})},apiPrintReferredPatientsReport(e,t){return r().get(`/referredPatientsReport/printReport/${params.id}`)},apiInitReportProcess(e,t){return r().post(`/${e}/initReportProcess`,t)},async getProcessingStatus(e,t){return await r().get(`/${e}/getProcessingStatus/${t.id}`)},printReport(e,t,i){return r().get(`/${e}/printReport/${t}/${i}`,{responseType:"json"})},printReportOther(e,t){return r().get(`/${e}/printReport/${t}`)},delete(e,t){return r().delete(`/${e}/delete/${t}`)},get(e,t){return r().get(`/${e}/${t}`)},createDrugArrayOfArrayRow(e){const t=[];for(const i in e){const s=[];s.push(e[i]),t.push(s)}return t},mapaDeAgrupamento(e){const t={};return e.forEach(i=>{const s=i.nid,n=i.pickupDate,a=`${s}_${n}`;if(!t[a])t[a]={...i},t[a].drugQuantityTemps=[i.drugQuantityTemps[0].drugName+" - "+i.drugQuantityTemps[0].quantity];else{const o=i.drugQuantityTemps[0].drugName,p=i.drugQuantityTemps[0].quantity;t[a].drugQuantityTemps.includes(o)||t[a].drugQuantityTemps.push(o+" - "+p)}}),t},apiGetMigrationLogReport(){return r().get("/migrationLog/printReport",{responseType:"json"})},getFormatDDMMYYYY(e){return P.parseZone(e).format("DD-MM-YYYY")},getFormatYYYYMMDD(e){return P(e).format("YYYY-MM-DD")},getDashboardServiceButton(e,t){return v.value?r().get(`/dashBoard/getDashboardServiceButton/${e}/${t}`):this.getAllPatientActive(e)},getRegisteredPatientByDispenseType(e,t,i){return v.value?r().get(`/dashBoard/getRegisteredPatientByDispenseType/${e}/${t}/${i}`):this.getStatisticBarReport(e,i)},removerDuplicados(e){return e.reduce((i,s)=>(i.some(n=>n.patientId===s.patientId)||i.push(s),i),[])},getPatientsFirstDispenseByAge(e,t,i){return v.value?r().get(`/dashBoard/getPatientsFirstDispenseByAge/${e}/${t}/${i}`):this.getDispenseByAgeAndMonthInYear(e,i)},calcularIdade(e){const t=new Date,i=new Date(e);let s=t.getFullYear()-i.getFullYear();const n=t.getMonth()-i.getMonth();return(n<0||n===0&&t.getDate()<i.getDate())&&s--,s},async getActivePatientPercentage(e,t,i){return v.value?r().get(`/dashBoard/getActivePatientPercentage/${e}/${t}/${i}`):this.getAllPatientActiveByGender(e,i)},filterUniquePatients(e){const t=new Map;for(const i of e)if(!t.has(i.patientId))t.set(i.patientId,i);else{const s=t.get(i.patientId);new Date(i.visitDate)>new Date(s.visitDate)&&t.set(i.patientId,i),new Date(i.lastEpisode)>new Date(s.lastEpisode)&&t.set(i.patientId,i),new Date(i.prescriptionDate)>new Date(s.prescriptionDate)&&t.set(i.patientId,i)}return Array.from(t.values())},groupByGender(e){const t=e.reduce((n,a)=>{const o=a.gender;return n[o]=n[o]||{quantity:0},n[o].quantity++,n},{}),i=[{gender:"Masculino",quantity:0,percent:0},{gender:"Feminino",quantity:0,percent:0}],s=e.length;for(const n in t){const a=t[n].quantity,o=a/s*100;i[n==="Masculino"?0:1]={gender:n,quantity:a,percent:o}}return i},getPatientsFirstDispenseByGender(e,t,i){return v.value?r().get(`/dashBoard/getPatientsFirstDispenseByGender/${e}/${t}/${i}`):this.getDispenseByGenderAndMonthInYear(e,i)},agruparRegistrosPorDispenseTypeCodeMonthGender(e){const t=e.reduce((i,s)=>{const n=`${s.dispenseTypeCode}-${s.month}-${s.gender}`;return i[n]||(i[n]={dispenseTypeCode:s.dispenseTypeCode,month:s.month,quantity:0,gender:s.gender}),i[n].quantity++,i},{});return Object.values(t)},async getDispenseByAge(e,t,i){if(v.value)return r().get(`/dashBoard/getDispenseByAge/${e}/${t}/${i}`);{const[s]=await Promise.all([this.getAllPatientActiveByAGE(e,i)]);return this.agruparRegistros(s)}},agruparRegistros(e){const t=e.reduce((i,s)=>{const n=s.dispenseTypeCode,a=s.faixa;return i[n]||(i[n]={dispenseType:n,adulto:0,menor:0}),a==="ADULTO"?i[n].adulto=s.quantity:a==="MENOR"&&(i[n].menor=s.quantity),i},{});return Object.values(t)},agruparRegistrosMascFem(e){const t=e.reduce((i,s)=>{const n=s.dispenseTypeCode,a=s.gender;return i[n]||(i[n]={dispenseType:n,masculino:0,femenino:0}),a==="Masculino"?i[n].masculino++:a==="Feminino"&&i[n].femenino++,i},{});return Object.values(t)},getStockAlert(e,t){return v.value?r().get(`/dashBoard/getStockAlert/${e}/${t}`):$.apiGetStockAlertAll(e)},async getDispensesByGender(e,t,i){if(v.value)return r().get(`/dashBoard/getDispensesByGender/${e}/${t}/${i}`);{const[s]=await Promise.all([this.getDispenseByGenderAndMonthInYear(e,i)]);return this.agruparRegistrosMascFem(s)}},referredPatientsMobileOffline(e,t,i){const s=new Date(e),n=new Date(t),a=i;return S.nSQL("patientVisits").query("select",["patientVisits.patientVisitDetails[0].prescription.id AS prescriptionId","patientVisits.visitDate AS visitDate","patientVisits.clinic.id AS clinicID","packs.pickupDate AS pickupDate","patientVisits.patient.id AS patientId","episodes.episodeDate AS episodeDate","identifiers.startDate AS startDate","startStopReasons.code AS code","clinicalServices.code AS service","identifiers.value AS nid","patientVisits.patient.firstNames AS firstNames","patientVisits.patient.middleNames AS middleNames","packs.nextPickUpDate AS nextPickUpDate","patientVisits.patient.lastNames AS lastNames","patientVisits.patient.dateOfBirth AS dateOfBirth","packs.dateReceived AS referenceDate","episodes.referralClinic AS referralClinic"]).join([{type:"inner",table:"patientVisitDetails",where:["patientVisits.id","=","patientVisitDetails.patientVisit.id"]},{type:"inner",table:"episodes",where:["episodes.id","=","patientVisitDetails.episode.id"]},{type:"inner",table:"packs",where:["packs.id","=","patientVisitDetails.pack.id"]},{type:"inner",table:"identifiers",where:["identifiers.patient.id","=","patientVisits.patient.id"]},{type:"inner",table:"startStopReasons",where:["startStopReasons.id","=","episodes.startStopReason.id"]},{type:"inner",table:"clinicalServices",where:["clinicalServices.id","=","identifiers.service.id"]}]).exec().then(o=>(o=this.removerDuplicados(o),o.filter(p=>p.service==="TARV"&&p.code==="REFERIDO_PARA"&&new Date(p.episodeDate)>=s&&new Date(p.episodeDate)<=n&&p.clinicID===a))).catch(o=>{console.error(o)})},referredBackPatientsMobileOffline(e,t,i){const s=new Date(e),n=new Date(t),a=i;return S.nSQL("patientVisits").query("select",["patientVisits.patientVisitDetails[0].prescription.id AS prescriptionId","patientVisits.visitDate AS visitDate","patientVisits.clinic.id AS clinicID","packs.pickupDate AS pickupDate","patientVisits.patient.id AS patientId","episodes.episodeDate AS episodeDate","identifiers.startDate AS startDate","startStopReasons.code AS code","clinicalServices.code AS service","identifiers.value AS nid","patientVisits.patient.firstNames AS firstNames","patientVisits.patient.middleNames AS middleNames","packs.nextPickUpDate AS nextPickUpDate","patientVisits.patient.lastNames AS lastNames","patientVisits.patient.dateOfBirth AS dateOfBirth","packs.dateReceived AS referenceDate","episodes.referralClinic AS referralClinic","episodes.notes AS notes"]).join([{type:"inner",table:"patientVisitDetails",where:["patientVisits.id","=","patientVisitDetails.patientVisit.id"]},{type:"inner",table:"episodes",where:["episodes.id","=","patientVisitDetails.episode.id"]},{type:"inner",table:"packs",where:["packs.id","=","patientVisitDetails.pack.id"]},{type:"inner",table:"identifiers",where:["identifiers.patient.id","=","patientVisits.patient.id"]},{type:"inner",table:"startStopReasons",where:["startStopReasons.id","=","episodes.startStopReason.id"]},{type:"inner",table:"clinicalServices",where:["clinicalServices.id","=","identifiers.service.id"]}]).exec().then(o=>(o=this.removerDuplicados(o),o.filter(p=>p.service==="TARV"&&p.code==="VOLTOU_REFERENCIA"&&new Date(p.episodeDate)>=s&&new Date(p.episodeDate)<=n&&p.clinicID===a))).catch(o=>{console.error(o)})},saoIguais(e,t){if(e.length!==t.length)return!1;for(let i=0;i<e.length;i++)if(e[i]!==t[i])return!1;return!0},areEqualObjects(e,t){return JSON.stringify(e)===JSON.stringify(t)},async getDispenseByGenderAndMonthInYear(e,t){const i=[],[s]=await Promise.all([A.getTotalPacksInYear(e)]);for(let n=0;n<s.length;n++){const a=s[n];for(const o of a){const p=o.patientvisitDetails,y=p.patientVisit,u=p.prescription,D=u.prescriptionDetails,c=p.episode.patientServiceIdentifier.service,l=y.patient;let d="";if(c.code===t&&u!=null&&(d=D.length>0?D[0].dispenseType.code:""),c.code===t){const g=i.find(R=>R.faixa===l.gender&&R.month===n&&R.service===c.code);g?g.quantity++:i.push({dispenseTypeCode:d,month:n,service:c.code,gender:l.gender,quantity:1})}}}return i},async getDispenseByAgeAndMonthInYear(e,t){const i=[],[s]=await Promise.all([A.getTotalPacksInYear(e)]);for(let n=0;n<s.length;n++){const a=s[n];for(const o of a){const p=o.patientvisitDetails,y=p.patientVisit,u=p.prescription,D=u.prescriptionDetails,c=p.episode.patientServiceIdentifier.service,l=y.patient;let d="";if(c.code===t){u!=null&&(d=D.length>0?D[0].dispenseType.code:"");const g=i.find(R=>R.faixa===(this.calcularIdade(l.dateOfBirth)>=15?"ADULTO":"MENOR")&&R.month===n&&R.service===c.code);g?g.quantity++:i.push({dispenseTypeCode:d,month:n,service:c.code,faixa:this.calcularIdade(l.dateOfBirth)>=15?"ADULTO":"MENOR",quantity:1})}}}return i},async getAllPatientActive(e){const t=[],i=[],[s]=await Promise.all([A.getAllActivePacksInYear(e)]);for(let n=0;n<s.length;n++){const a=s[n];for(const o of a){const p=o.patientvisitDetails,y=p.patientVisit,h=p.episode.patientServiceIdentifier.service,f=y.patient,c=i.find(d=>d.patient_id===f.id&&h.code===d.service),l=t.find(d=>d.service===h.code);c||(i.push({service:h.code,patient_id:f.id}),l?l.quantity++:t.push({service:h.code,quantity:1}))}}return t},async getAllPatientActiveByGender(e,t){const i=[],s=[],[n]=await Promise.all([A.getAllActivePacksInYear(e)]);for(let a=0;a<n.length;a++){const o=n[a];for(const p of o){const y=p.patientvisitDetails,u=y.patientVisit,f=y.episode.patientServiceIdentifier.service,c=u.patient;if(f.code===t){const l=s.find(g=>g.patient_id===c.id&&f.code===g.service&&g.gender===c.gender),d=i.find(g=>g.service===f.code&&g.gender===c.gender);l||(s.push({gender:c.gender,service:f.code,patient_id:c.id}),d?d.quantity++:i.push({gender:c.gender,service:f.code,quantity:1}))}}}return i},async getAllPatientActiveByAGE(e,t){const i=[],[s]=await Promise.all([A.getTotalPacksInYear(e)]);for(let n=0;n<s.length;n++){const a=s[n];for(const o of a){const p=o.patientvisitDetails,y=p.patientVisit,u=p.episode,D=p.prescription,h=D.prescriptionDetails,c=u.patientServiceIdentifier.service,l=y.patient;let d="";if(c.code===t){D!=null&&(d=h.length>0?h[0].dispenseType.description:"");const g=i.find(R=>c.code===R.service&&R.faixa===(this.calcularIdade(l.dateOfBirth)>=15?"ADULTO":"MENOR")&&R.dispenseTypeCode===d);g?g.quantity++:i.push({dispenseTypeCode:d,faixa:this.calcularIdade(l.dateOfBirth)>=15?"ADULTO":"MENOR",service:c.code,quantity:1})}}}return i},async getStatisticBarReport(e,t){const i=[],[s]=await Promise.all([A.getTotalPacksInYear(e)]);for(let n=0;n<s.length;n++){const a=s[n];for(const o of a){const p=o.patientvisitDetails,y=p.prescription,u=y.prescriptionDetails,f=p.episode.patientServiceIdentifier.service;let c="";if(f.code===t){y!=null&&(c=u.length>0?u[0].dispenseType.code:"");const l=i.find(d=>d.dispense_type===c&&d.month===n&&f.code===t);l?l.quantity++:i.push({dispense_type:c,month:n,service:t,quantity:1})}}}return i}};export{T as R};
